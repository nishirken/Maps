exports[`Marks list item Rendered 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <styled.div
    current={undefined}
    onClick={[Function]}>
    <ListItemText
        editMarkerName={false}
        markerCoords={undefined}
        markerName={undefined}
        markerNumber={undefined}
        setNewMarkerName={[Function]}
        switchEditMarkerName={[Function]} />
    <Buttons
        editMarkerName={false}
        markerIndex={undefined}
        setDeleteMarkerIndex={undefined}
        switchEditMarkerName={[Function]} />
</styled.div>,
  "nodes": Array [
    <styled.div
      current={undefined}
      onClick={[Function]}>
      <ListItemText
            editMarkerName={false}
            markerCoords={undefined}
            markerName={undefined}
            markerNumber={undefined}
            setNewMarkerName={[Function]}
            switchEditMarkerName={[Function]} />
      <Buttons
            editMarkerName={false}
            markerIndex={undefined}
            setDeleteMarkerIndex={undefined}
            switchEditMarkerName={[Function]} />
</styled.div>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 1,
      "_context": Object {},
      "_currentElement": <ListItem
        setCurrentMarker={[Function]}
        store={
                Object {
                        "dispatch": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                        Symbol(observable): [Function],
                      }
        } />,
      "_debugID": 1,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance": ListItem {
        "_reactInternalInstance": [Circular],
        "context": Object {},
        "props": Object {
          "setCurrentMarker": [Function],
          "store": Object {
            "dispatch": [Function],
            "getState": [Function],
            "replaceReducer": [Function],
            "subscribe": [Function],
            Symbol(observable): [Function],
          },
        },
        "refs": Object {},
        "state": Object {
          "canSendMarkerName": false,
          "editMarkerName": false,
          "newMarkerName": null,
        },
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountOrder": 1,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": NoopInternalComponent {
        "_currentElement": <styled.div
          current={undefined}
          onClick={[Function]}>
          <ListItemText
                    editMarkerName={false}
                    markerCoords={undefined}
                    markerName={undefined}
                    markerNumber={undefined}
                    setNewMarkerName={[Function]}
                    switchEditMarkerName={[Function]} />
          <Buttons
                    editMarkerName={false}
                    markerIndex={undefined}
                    setDeleteMarkerIndex={undefined}
                    switchEditMarkerName={[Function]} />
</styled.div>,
        "_debugID": 2,
        "_renderedOutput": <styled.div
          current={undefined}
          onClick={[Function]}>
          <ListItemText
                    editMarkerName={false}
                    markerCoords={undefined}
                    markerName={undefined}
                    markerNumber={undefined}
                    setNewMarkerName={[Function]}
                    switchEditMarkerName={[Function]} />
          <Buttons
                    editMarkerName={false}
                    markerIndex={undefined}
                    setDeleteMarkerIndex={undefined}
                    switchEditMarkerName={[Function]} />
</styled.div>,
      },
      "_renderedNodeType": 1,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
      "_warnedAboutRefsInRender": false,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <ListItem
    setCurrentMarker={[Function]}
    store={
        Object {
            "dispatch": [Function],
            "getState": [Function],
            "replaceReducer": [Function],
            "subscribe": [Function],
            Symbol(observable): [Function],
          }
    } />,
}
`;
